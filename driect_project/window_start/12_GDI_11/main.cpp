#include <Windows.h>
#include <time.h>
#include <wchar.h>
#include <stdio.h>

//添加依赖
#pragma comment(lib, "winmm.lib")
#pragma comment(lib, "Msimg32.lib")

//定义宏
#define WINDOW_WIDTH 1000
#define WINDOW_HEIGHT 600
#define WINDOW_TITLE L"Hello World!"
#define SPRITE_NUMBER 50

//定义sprite结构体
struct Sprites
{
	int x, y;
	int index;
	int direction;
};

//全局变量声明
HDC g_hdc = NULL, g_mdc = NULL, g_bdc = NULL;
HBITMAP g_hSprite[4], g_hBackground;
Sprites sprite[SPRITE_NUMBER];
DWORD g_tPre = 0, g_tNow = 0;

//函数声明
//处理消息函数
LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wparam, LPARAM lparam);
VOID BubSort();

//Game Flow 函数
BOOL Game_Init(HWND hwnd);
VOID Game_Paint(HWND hwnd);
BOOL Game_Cleanup(HWND hwnd);

//主函数
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPreInstance, LPSTR lpCmdLine, int nShowCmd)
{
	//1.设计一个完整的窗口类
	WNDCLASSEX wndClass = { 0 };//定义一个窗口类
	wndClass.cbSize = sizeof(WNDCLASSEX);//设置结构体的大小
	wndClass.style = CS_HREDRAW | CS_VREDRAW;//设置窗口样式
	wndClass.lpfnWndProc = WndProc;//设置消息处理函数
	wndClass.cbClsExtra = 0;//窗口类的附加内存，一般设置为0
	wndClass.cbWndExtra = 0;//窗口的附加内存，一般设置为0
	wndClass.hInstance = hInstance;//包含窗体实例的程序的句柄
	wndClass.hIcon = (HICON)LoadImage(NULL, L"icon.ico", IMAGE_ICON, 0, 0, LR_DEFAULTSIZE | LR_LOADFROMFILE);//设置一个图标
	wndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	wndClass.hbrBackground = (HBRUSH)GetStockObject(DKGRAY_BRUSH);//指定一个灰色画刷句柄
	wndClass.lpszClassName = NULL;//不需要下拉菜单
	wndClass.lpszClassName = L"HWWND";//指定窗口类的名字

									  //2.注册窗口类
	if (!RegisterClassEx(&wndClass)) return -1;

	//3.创建窗体
	HWND hwnd = CreateWindow(L"HWWND", WINDOW_TITLE, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, WINDOW_WIDTH, WINDOW_HEIGHT, NULL, NULL, hInstance, NULL);

	//4.窗体移动，显示和更新
	//MoveWindow(hwnd, 100, 100, WINDOW_WIDTH, WINDOW_HEIGHT, true);
	ShowWindow(hwnd, nShowCmd);
	//UpdateWindow(hwnd);

	//初始化游戏资源
	if (!Game_Init(hwnd))
	{
		MessageBox(hwnd, L"Faild!", L"Message", 0);
		return FALSE;
	}
	//PlaySound(L"OrcTheme.wav", NULL, SND_FILENAME | SND_ASYNC | SND_LOOP);

	//5.消息分发
	MSG msg = { 0 };
	while (msg.message != WM_QUIT)
	{
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		//会被阻塞（拖动窗体试试 和 GDI_7对比下）
		g_tNow = GetTickCount();
		if (g_tNow - g_tPre > 100)
		{
			Game_Paint(hwnd);
			g_tPre = g_tNow;
		}
	}

	//6.注销窗体
	UnregisterClass(L"HWWND", hInstance);

	return 0;
}

//消息处理函数
LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	//PAINTSTRUCT paintStruct;
	switch (message)
	{
	case WM_TIMER:
		Game_Paint(hwnd);
		break;
	case WM_KEYDOWN:
		if (wParam == VK_ESCAPE)
		{
			DestroyWindow(hwnd);//销毁窗体并发送一个WM_DESTROY消息
		}
		break;
	case WM_DESTROY:
		Game_Cleanup(hwnd);
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hwnd, message, wParam, lParam);
	}
	return 0;
}

BOOL Game_Init(HWND hwnd)
{
	HBITMAP bmp;

	srand((unsigned)time(NULL));
	g_hdc = GetDC(hwnd);

	//1.加载位图
	g_hBackground = (HBITMAP)LoadImage(NULL, L"bg.bmp", IMAGE_BITMAP, WINDOW_WIDTH, WINDOW_HEIGHT, LR_LOADFROMFILE);
	g_hSprite[0] = (HBITMAP)LoadImage(NULL, L"11.bmp", IMAGE_BITMAP, 384, 96, LR_LOADFROMFILE);//下
	g_hSprite[1] = (HBITMAP)LoadImage(NULL, L"22.bmp", IMAGE_BITMAP, 384, 96, LR_LOADFROMFILE);//左
	g_hSprite[2] = (HBITMAP)LoadImage(NULL, L"33.bmp", IMAGE_BITMAP, 384, 96, LR_LOADFROMFILE);//右
	g_hSprite[3] = (HBITMAP)LoadImage(NULL, L"44.bmp", IMAGE_BITMAP, 384, 96, LR_LOADFROMFILE);//上

																							   //2.建立兼容的DC
	g_mdc = CreateCompatibleDC(g_hdc);//建立兼容设备环境的内存DC, 参数是与哪个设备兼容
	g_bdc = CreateCompatibleDC(g_hdc);//建立后备缓冲区
	bmp = CreateCompatibleBitmap(g_hdc, WINDOW_WIDTH, WINDOW_HEIGHT);
	SelectObject(g_mdc, bmp);//需要先给 mdc 一张画布

	for (int i = 0; i < SPRITE_NUMBER; i++)//初始化sprite数据
	{
		sprite[i].direction = rand() % 4;
		sprite[i].x = rand() % WINDOW_WIDTH;
		sprite[i].y = rand() % WINDOW_HEIGHT;
		sprite[i].index = 0;
	}

	return TRUE;
}

VOID Game_Paint(HWND hwnd)
{
	//3.选用位图对象
	SelectObject(g_bdc, g_hBackground);
	//4.贴图
	BitBlt(g_mdc, 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, g_bdc, 0, 0, SRCCOPY);
	BubSort();
	for (int i = 0; i < SPRITE_NUMBER; i++)
	{
		Sprites s = sprite[i];

		if (s.x > WINDOW_WIDTH)
		{
			s.x = 0;
		}
		else if (s.x < 0)
		{
			s.x = WINDOW_WIDTH;
		}

		if (s.y > WINDOW_HEIGHT)
		{
			s.y = 0;
		}
		else if (s.y < 0)
		{
			s.y = WINDOW_HEIGHT;
		}
		if (s.index > 3)
		{
			s.index = 0;
		}

		//3.选用位图对象
		SelectObject(g_bdc, g_hSprite[s.direction]);
		//4.贴图
		TransparentBlt(g_mdc, s.x, s.y, 96, 96, g_bdc, s.index * 96, 0, 96, 96, RGB(0, 0, 0));

		sprite[i].index++;
		//随机取方向
		int temp = rand() % 4;
		if (temp != s.direction)
		{
			sprite[i].direction = temp;
			sprite[i].index = 0;
		}

		switch (s.direction)
		{
		case 0:
			sprite[i].y += 10;
			break;
		case 1:
			sprite[i].x -= 10;
			break;
		case 2:
			sprite[i].x += 10;
			break;
		case 3:
			sprite[i].y -= 10;
			break;
		}
	}

	BitBlt(g_hdc, 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, g_mdc, 0, 0, SRCCOPY);
}

BOOL Game_Cleanup(HWND hwnd)
{
	//5.删除创建的DC和位图资源
	DeleteObject(g_hSprite[0]);
	DeleteObject(g_hSprite[1]);
	DeleteObject(g_hSprite[2]);
	DeleteObject(g_hSprite[3]);
	DeleteObject(g_hBackground);
	KillTimer(hwnd, 1);
	DeleteObject(g_bdc);
	DeleteObject(g_mdc);
	ReleaseDC(hwnd, g_hdc);
	return TRUE;
}

VOID BubSort()
{
	Sprites temp;
	for (int i = 0; i < SPRITE_NUMBER; i++)
	{
		for (int j = 0; j < SPRITE_NUMBER; j++)
		{
			if (sprite[i].y < sprite[j].y)
			{
				temp = sprite[i];
				sprite[i] = sprite[j];
				sprite[j] = temp;
			}
		}
	}
}